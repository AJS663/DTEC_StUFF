import tkinter as tk
from tkinter import messagebox, scrolledtext
import socket
import threading

class Application(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Alfriston Community Forum")
        self.geometry("500x400")
        self.user_data = {}
        self.frames = {}

        container = tk.Frame(self)
        container.pack(expand=True)

        self.frames["CreateAccountPage"] = CreateAccountPage(container, self)
        self.frames["CreateAccountPage"].pack()

        self.frames["PublicChatPage"] = PublicChatPage(container, self)

    def show_frame(self, page_name):
        frame = self.frames[page_name]
        frame.tkraise()

class CreateAccountPage(tk.Frame):
    def __init__(self, parent, controller):
        super().__init__(parent)
        self.controller = controller

        container = tk.Frame(self)
        container.pack(expand=True)  # Center the container within the frame

        tk.Label(container, text="Alfriston Community Forum", font=("Arial", 24, "bold")).pack(pady=10)
        tk.Label(container, text="Create an Account", font=("Arial", 18)).pack(pady=10)

        tk.Label(container, text="Username:").pack()
        self.username_entry = tk.Entry(container)
        self.username_entry.pack(pady=5)

        tk.Label(container, text="Password:").pack()
        self.password_entry = tk.Entry(container, show="*")
        self.password_entry.pack(pady=5)

        tk.Button(container, text="Submit", command=self.submit).pack(pady=10)

    def submit(self):
        username = self.username_entry.get()
        password = self.password_entry.get()

        if not username or not password:
            messagebox.showerror("Error", "All fields are required!")
            return

        self.controller.user_data = {"username": username, "password": password}
        messagebox.showinfo("Success", f"Account created for {username}!")
        self.controller.show_frame("PublicChatPage")

class PublicChatPage(tk.Frame):
    def __init__(self, parent, controller):
        super().__init__(parent)
        self.controller = controller

        self.client = None

        container = tk.Frame(self)
        container.pack(expand=True)

        self.chat_area = scrolledtext.ScrolledText(container)
        self.chat_area.pack(padx=20, pady=5)
        self.chat_area.config(state=tk.DISABLED)

        self.message_entry = tk.Entry(container, width=50)
        self.message_entry.pack(padx=20, pady=5)

        send_button = tk.Button(container, text="Send", command=self.send_message)
        send_button.pack(padx=20, pady=5)

        self.connect_to_server()

    def connect_to_server(self):
        HOST = '127.0.0.1'
        PORT = 12345

        self.client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.client.connect((HOST, PORT))

        receive_thread = threading.Thread(target=self.receive_messages)
        receive_thread.start()

    def receive_messages(self):
        while True:
            try:
                message = self.client.recv(1024).decode('utf-8')
                self.chat_area.config(state=tk.NORMAL)
                self.chat_area.insert(tk.END, message + '\n')
                self.chat_area.config(state=tk.DISABLED)
            except:
                print("An error occurred!")
                self.client.close()
                break

    def send_message(self):
        message = self.message_entry.get()
        self.client.send(message.encode('utf-8'))
        self.message_entry.delete(0, tk.END)

if __name__ == "__main__":
    app = Application()
    app.mainloop()
